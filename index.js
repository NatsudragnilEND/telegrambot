const { Telegraf } = require("telegraf");
const { createClient } = require("@supabase/supabase-js");
const axios = require("axios");
const supabaseUrl = "https://lgbnsbrrybyfdqkkchpm.supabase.co";
const supabaseKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxnYm5zYnJyeWJ5ZmRxa2tjaHBtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE0OTEzOTUsImV4cCI6MjA0NzA2NzM5NX0.De-PqHbs_65H8oQcNuFYDLC3YI-H7IpFDEipxgh_g2g";
const supabase = createClient(supabaseUrl, supabaseKey);

const botToken = "7831120296:AAEUYrbzyZDhpAH7-TaLt1gzAAuv7vwrxQM";
const bot = new Telegraf(botToken);

const userStates = {};

const askName = async (ctx) => {
  await ctx.reply("üòÅüëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! \n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ", {
    reply_markup: { force_reply: true },
  });
};

const askBirthYear = async (ctx) => {
  await ctx.reply("üéâ –í –∫–∞–∫–æ–º –≥–æ–¥—É —Ç—ã —Ä–æ–¥–∏–ª—Å—è? üòÑ", {
    reply_markup: { force_reply: true },
  });
};

const askSex = async (ctx) => {
  await ctx.reply("‚ú® –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª? üòÑ", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ú—É–∂—Å–∫–æ–π", callback_data: "male" }],
        [{ text: "–ñ–µ–Ω—Å–∫–∏–π", callback_data: "female" }],
        [{ text: "–î—Ä—É–≥–æ–π", callback_data: "other" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
};

const askdatingpreference = async (ctx) => {
  await ctx.reply("üòâ‚ú® –° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è? üòÑ", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ú—É–∂—á–∏–Ω—ã", callback_data: "male" }],
        [{ text: "–ñ–µ–Ω—â–∏–Ω—ã", callback_data: "female" }],
        [{ text: "–í—Å–µ", callback_data: "both" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
};

const askPhoto = async (ctx) => {
  await ctx.reply("ü§©üì∏ –û—Ç–ª–∏—á–Ω–æ! –ê –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?  ", {
    reply_markup: { force_reply: true },
  });
};

const askDescription = async (ctx) => {
  await ctx.reply("üòâüí¨ –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! ", {
    reply_markup: { force_reply: true },
  });
};

const askHeight = async (ctx) => {
  await ctx.reply("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç? üòÑ", {
    reply_markup: { force_reply: true },
  });
};

const askStatus = async (ctx) => {
  await ctx.reply("üòÅ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–û–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏", callback_data: "casual" }],
        [{ text: "–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data: "serious" }],
        [{ text: "–î—Ä—É–∂–±–∞", callback_data: "friendship" }],
        [{ text: "–°–≤–∏–¥–∞–Ω–∏–µ", callback_data: "dating" }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
};

const askLocation = async (ctx) => {
  await ctx.reply("üó∫ –û—Ç–ª–∏—á–Ω–æ! –ê –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ? üòâ", {
    reply_markup: {
      keyboard: [
        [{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location: true }],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
};

const getPhotoUrl = async (fileId) => {
  const fileInfo = await bot.telegram.getFile(fileId);
  return `https://api.telegram.org/file/bot${botToken}/${fileInfo.file_path}`;
};

bot.on("callback_query", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];
  const selectedData = ctx.callbackQuery.data;

  if (userState) {
    if (userState.state === "sex" && userState.editingField !== "sex") {
      const sexMap = {
        male: "–ú—É–∂—Å–∫–æ–π",
        female: "–ñ–µ–Ω—Å–∫–∏–π",
        other: "–î—Ä—É–≥–æ–π",
      };

      userState.sex = sexMap[selectedData];
      await ctx.answerCbQuery();
      await ctx.reply(`üòÅüëå –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${userState.sex} üòÑ`);
      userState.state = "datingpreference";
      await askdatingpreference(ctx);
    } else if (userState.state === "datingpreference" && userState.editingField !== "datingpreference") {
      const preferenceMap = {
        male: "–ú—É–∂—á–∏–Ω—ã",
        female: "–ñ–µ–Ω—â–∏–Ω—ã",
        both: "–í—Å–µ",
      };

      userState.datingpreference = preferenceMap[selectedData];
      await ctx.answerCbQuery();
      await ctx.reply(`üòÅüëå –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${userState.datingpreference} üòÑ`);
      userState.state = "photo";
      await askPhoto(ctx);
    } else if (userState.state === "status" && userState.editingField !== "status") {
      const statusMap = {
        casual: "–û–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏",
        serious: "–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        friendship: "–î—Ä—É–∂–±–∞",
        dating: "–°–≤–∏–¥–∞–Ω–∏–µ",
      };

      userState.status = statusMap[selectedData];
      await ctx.answerCbQuery();
      await ctx.reply(`üòÅüëå –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${userState.status} üòÑ`);
      userState.state = "location";
      await askLocation(ctx);
    } else if (userState.state === "edit_profile" && userState.editingField === "sex") {
      const sexMap = {
        male: "–ú—É–∂—Å–∫–æ–π",
        female: "–ñ–µ–Ω—Å–∫–∏–π",
        other: "–î—Ä—É–≥–æ–π",
      };

      const newSex = sexMap[selectedData];

      await supabase
        .from("users")
        .update({ sex: newSex })
        .eq("telegram_id", userId)
        .then(() => {
          ctx.answerCbQuery();
          ctx.reply("‚ú® –ü–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üòÑ");
          delete userStates[userId];
        })
        .catch((error) => {
          console.error("Error updating user:", error);
          ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–∞! üòî ");
        });
    } else if (userState.state === "edit_profile" && userState.editingField === "datingpreference") {
      const preferenceMap = {
        male: "–ú—É–∂—á–∏–Ω—ã",
        female: "–ñ–µ–Ω—â–∏–Ω—ã",
        both: "–í—Å–µ",
      };

      const newPreference = preferenceMap[selectedData];

      await supabase
        .from("users")
        .update({ datingpreference: newPreference })
        .eq("telegram_id", userId)
        .then(() => {
          ctx.answerCbQuery();
          ctx.reply("‚ú® –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! üòÑ");
          delete userStates[userId];
        })
        .catch((error) => {
          console.error("Error updating user:", error);
          ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è! üòî ");
        });
    } else if (userState.state === "edit_profile" && userState.editingField === "status") {
      const statusMap = {
        casual: "–û–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏",
        serious: "–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        friendship: "–î—Ä—É–∂–±–∞",
        dating: "–°–≤–∏–¥–∞–Ω–∏–µ",
      };

      const newStatus = statusMap[selectedData];

      await supabase
        .from("users")
        .update({ status: newStatus })
        .eq("telegram_id", userId)
        .then(() => {
          ctx.answerCbQuery();
          ctx.reply("‚ú® –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üòÑ");
          delete userStates[userId];
        })
        .catch((error) => {
          console.error("Error updating user:", error);
          ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! üòî ");
        });
    }
  }
});
bot.start((ctx) => {
  ctx.reply(
    "üòÅüëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! \n\n" +
      "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /register "
  );
});

bot.command("register", async (ctx) => {
  const userId = ctx.from.id;

  try {
    const { data: user, error } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", userId);

    if (user?.[0]) {
      await ctx.reply(
        "üòâüí¨ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! \n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏ /profile "
      );
      return;
    } else {
      let userState = { state: "name" };
      userStates[userId] = userState;
      await askName(ctx);
    }
  } catch (error) {
    console.error("Error checking registration status:", error);
    await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî");
  }
});

bot.command("profile", async (ctx) => {
  const userId = ctx.from.id;
  await displayProfile(ctx, userId);
});

bot.command("edit_profile", async (ctx) => {
  const userId = ctx.from.id;
  await editProfile(ctx, userId);
});
bot.command("delete_profile", async (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = { state: "delete_confirmation" };
  await ctx.reply(
    "üò±üòî –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? \n\n" +
      "–ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏ /confirm_delete. üòî "
  );
});

bot.command("confirm_delete", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "delete_confirmation") {
    await deleteProfile(ctx, userId);
    delete userStates[userId];
  } else {
    await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî");
  }
});

bot.command("help", async (ctx) => {
  await ctx.reply(
    "üòÅüëã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
      "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.\n" +
      "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n" +
      "/edit_profile - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n" +
      "/delete_profile - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
  );
});

bot.hears("–ò–º—è", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];
  userState.state = "edit_profile";
  if (userState && userState.state === "edit_profile") {
    userState.editingField = "name";
    await ctx.reply("üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", {
      reply_markup: { force_reply: true },
    });
  }
});

bot.hears("–í–æ–∑—Ä–∞—Å—Ç", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "age";
    await ctx.reply("üéâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:", {
      reply_markup: { force_reply: true },
    });
  }
});

bot.hears("–ü–æ–ª", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "sex";
    await ctx.reply("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ú—É–∂—Å–∫–æ–π", callback_data: "male" }],
          [{ text: "–ñ–µ–Ω—Å–∫–∏–π", callback_data: "female" }],
          [{ text: "–î—Ä—É–≥–æ–π", callback_data: "other" }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
});

bot.hears("–° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è?", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "datingpreference";
    await ctx.reply("üòâ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ú—É–∂—á–∏–Ω—ã", callback_data: "male" }],
          [{ text: "–ñ–µ–Ω—â–∏–Ω—ã", callback_data: "female" }],
          [{ text: "–í—Å–µ", callback_data: "both" }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
});

bot.hears("–§–æ—Ç–æ", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "photo";
    await ctx.reply("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:", {
      reply_markup: { force_reply: true },
    });
  }
});

bot.hears("–û–ø–∏—Å–∞–Ω–∏–µ", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "description";
    await ctx.reply("üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", {
      reply_markup: { force_reply: true },
    });
  }
});

bot.hears("–†–æ—Å—Ç", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "height";
    await ctx.reply("üìè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç:", {
      reply_markup: { force_reply: true },
    });
  }
});

bot.hears("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "status";
    await ctx.reply("üòÅ‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏", callback_data: "casual" }],
          [{ text: "–°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data: "serious" }],
          [{ text: "–î—Ä—É–∂–±–∞", callback_data: "friendship" }],
          [{ text: "–°–≤–∏–¥–∞–Ω–∏–µ", callback_data: "dating" }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
});

bot.hears("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState && userState.state === "edit_profile") {
    userState.editingField = "location";
    await ctx.reply("üó∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", {
      reply_markup: {
        keyboard: [
          [{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location: true }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
});

bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];
  await updateLastSeen(userId);
  if (userState && userState.state !== "edit_profile") {
    await handleRegistrationResponse(ctx, userId);
  } else if (userState && userState.state === "edit_profile") {
    await handleEditProfileResponse(ctx, userId);
  }
});
const updateLastSeen = async (userId) => {
  try {
    await supabase
      .from("users")
      .update({ last_seen: new Date() })
      .eq("telegram_id", userId);
  } catch (error) {
    console.error("Error updating last_seen:", error);
  }
};
const handleRegistrationResponse = async (ctx, userId) => {
  const userState = userStates[userId];
  const text = ctx.message?.text;

  if (userState) {
    switch (userState.state) {
      case "name":
        userState.name = text;
        userState.state = "birthYear";
        await askBirthYear(ctx);
        break;

      case "birthYear":
        const birthYear = parseInt(text, 10);
        const currentYear = new Date().getFullYear();
        const age = currentYear - birthYear;
        if (isNaN(birthYear) || age < 18 || age > 100 || birthYear > currentYear) {
          await ctx.reply("üò±üòî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 18 –¥–æ 100 –ª–µ—Ç –Ω–∞–∑–∞–¥. üòî");
          return;
        }
        userState.age = birthYear; //Store birth year in age field.
        userState.state = "sex";
        await askSex(ctx);
        break;

      case "sex":
        userState.state = "datingpreference";
        await askdatingpreference(ctx);
        break;

      case "datingpreference":
        userState.state = "photo";
        await askPhoto(ctx);
        break;

      case "photo":
        if (ctx.message.photo) {
          const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
          userState.photo = await getPhotoUrl(fileId);
          userState.photo_file_id = fileId;
          userState.state = "description";
          await askDescription(ctx);
        } else {
          await ctx.reply("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é! üì∏");
        }
        break;

      case "description":
        userState.description = text;
        userState.state = "height";
        await askHeight(ctx);
        break;

      case "height":
        const height = parseFloat(text);
        if (isNaN(height) || height < 50 || height > 250) {
          await ctx.reply("üò±üòî –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 50 –¥–æ 250. üòî");
          return;
        }
        userState.height = height;
        userState.state = "status";
        await askStatus(ctx);
        break;

      case "status":
        userState.state = "location";
        await askLocation(ctx);
        break;
      case "location":
        await registerUser(ctx, userId, userState);
        delete userStates[userId];
        break;

      default:
        await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî");
        break;
    }
  }
};

const handleEditProfileResponse = async (ctx, userId) => {
  const userState = userStates[userId];
  const text = ctx.message.text;
  const editingField = userState.editingField;

  if (userState) {
    switch (editingField) {
      case "name":
        await supabase
          .from("users")
          .update({ name: text })
          .eq("telegram_id", userId)
          .then(() => {
            ctx.reply("‚ú® –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! üòÑ");
            delete userStates[userId];
          })
          .catch((error) => {
            console.error("Error updating user:", error);
            ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏! üòî ");
          });
        break;

      case "age":
        const birthYear = parseInt(text, 10);
        const currentYear = new Date().getFullYear();
        const age = currentYear - birthYear;
        if (isNaN(birthYear) || age < 18 || age > 100 || birthYear > currentYear) {
          await ctx.reply("üò±üòî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 18 –¥–æ 100 –ª–µ—Ç –Ω–∞–∑–∞–¥. üòî");
          return;
        }
        await supabase
          .from("users")
          .update({ age: birthYear })
          .eq("telegram_id", userId)
          .then(() => {
            ctx.reply("üéâ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üòÑ");
            delete userStates[userId];
          })
          .catch((error) => {
            console.error("Error updating user:", error);
            ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è! üòî ");
          });
        break;

      case "description":
        await supabase
          .from("users")
          .update({ description: text })
          .eq("telegram_id", userId)
          .then(() => {
            ctx.reply("üí¨ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! üòÑ");
            delete userStates[userId];
          })
          .catch((error) => {
            console.error("Error updating user:", error);
            ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è! üòî ");
          });
        break;

      case "height":
        const height = parseFloat(text);
        if (isNaN(height) || height < 50 || height > 250) {
          await ctx.reply("üò±üòî –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 50 –¥–æ 250. üòî");
          return;
        }
        await supabase
          .from("users")
          .update({ height: height })
          .eq("telegram_id", userId)
          .then(() => {
            ctx.reply("üìè –†–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üòÑ");
            delete userStates[userId];
          })
          .catch((error) => {
            console.error("Error updating user:", error);
            ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞! üòî ");
          });
        break;

      default:
        await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî");
        break;
    }
  }
};

const registerUser = async (ctx, userId, userState) => {
  try {
    const { data: newUser, error: insertError } = await supabase
      .from("users")
      .insert({
        telegram_id: userId,
        name: userState.name,
        age: userState.age, // Birth year
        sex: userState.sex,
        datingpreference: userState.datingpreference,
        photo: userState.photo,
        description: userState.description,
        height: userState.height,
        location: userState.location,
        status: userState.status,
        rating: 5,
        premium: false,
        photo_file_id: userState.photo_file_id,
      });

    if (insertError) {
      console.error("Error registering user:", insertError);
      await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî");
    } else {
      await ctx.replyWithHTML(
        `üòÅüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userState.name}! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üòÑ\n\n` +
          `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                  web_app: { url: `https://frontend-mu-flame.vercel.app/register/${userId}` },
                },
              ],
            ],
          },
        }
      );

      delete userStates[userId];
    }
  } catch (error) {
    console.error("Error registering user:", error);
    await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòî");
  }
};

const displayProfile = async (ctx, userId) => {
  try {
    const { data: user, error } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", userId);

    if (error) {
      console.error("Error fetching user profile:", error);
      await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è! üòî ");
      return;
    }

    if (user[0]) {
      const {
        name,
        age, //Birth Year
        sex,
        datingpreference,
        photo,
        description,
        height,
        location,
        status,
        photo_file_id,
        photo_url,
      } = user[0];

      const locationCoords = location.match(/\(([^,]+),([^)]+)\)/);
      const longitude = locationCoords ? locationCoords[1] : "";
      const latitude = locationCoords ? locationCoords[2] : "";

      let country = "";
      let city = "";
      if (longitude && latitude) {
        const response = await axios.get(
          `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`
        );

        if (response.data) {
          country = response.data.countryName || "";
          city = response.data.city || response.data.locality || "";
        }
      }

      let profileText = `<b>${name}</b> \n\n`;
      profileText += `üéâ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: ${age} \n\n`; //Display Birth Year
      profileText += `‚ú® –ü–æ–ª: ${sex} \n\n`;
      profileText += `üòâ‚ú® –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: ${datingpreference} \n\n`;
      profileText += `üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: ${description} \n\n`;
      profileText += `üìè –†–æ—Å—Ç: ${height} \n\n`;
      if (country || city) {
        profileText += `üó∫ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${city ? `${city}, ` : ""}${country} (<a href="https://www.google.com/maps?q=${latitude},${longitude}">–∫–∞—Ä—Ç–∞</a>) \n\n`;
      } else {
        profileText += `üó∫ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location} \n\n`;
      }

      profileText += `‚ú® –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: ${status} \n\n`;

      if (photo_url) {
        await ctx.replyWithPhoto(photo_url, {
          caption: profileText,
          parse_mode: "HTML",
        });
      } else if (photo_file_id) {
        await ctx.sendPhoto(photo_file_id, {
          caption: profileText,
          parse_mode: "HTML",
        });
      } else {
        await ctx.reply(profileText, { parse_mode: "HTML" });
      }
    } else {
      await ctx.reply("üò±üòî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! üòî ");
    }
  } catch (error) {
    console.error("Error fetching user profile:", error);
    await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è! üòî ");
  }
};

const editProfile = async (ctx, userId) => {
  try {
    const { data: user, error } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", userId);

    if (error) {
      console.error("Error fetching user profile:", error);
      await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è! üòî ");
      return;
    }

    if (user[0]) {
      userStates[userId] = { state: "edit_profile", userId };
      await ctx.reply("‚ú® –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? üòÑ ", {
        reply_markup: {
          keyboard: [
            [{ text: "–ò–º—è" }],
            [{ text: "–í–æ–∑—Ä–∞—Å—Ç" }],
            [{ text: "–ü–æ–ª" }],
            [{ text: "–° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è?" }],
            [{ text: "–§–æ—Ç–æ" }],
            [{ text: "–û–ø–∏—Å–∞–Ω–∏–µ" }],
            [{ text: "–†–æ—Å—Ç" }],
            [{ text: "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞" }],
            [{ text: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else {
      await ctx.reply("üò±üòî –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! üòî ");
    }
  } catch (error) {
    console.error("Error fetching user profile:", error);
    await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è! üòî ");
  }
};

bot.on("photo", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState) {
    const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    const photoUrl = await getPhotoUrl(fileId);

    if (userState.state === "photo" && userState.editingField !== "photo") {
      userState.photo = photoUrl;
      userState.photo_file_id = fileId;
      userState.state = "description";
      await askDescription(ctx);
    } else if (userState.state === "edit_profile" && userState.editingField === "photo") {
      await supabase
        .from("users")
        .update({ photo: photoUrl, photo_file_id: fileId })
        .eq("telegram_id", userId)
        .then(() => {
          ctx.reply("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! üòÑ");
          delete userStates[userId];
        })
        .catch((error) => {
          console.error("Error updating user:", error);
          ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! üòî ");
        });
    }
  }
});

bot.on("location", async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId];

  if (userState) {
    const location = `(${ctx.message.location.longitude},${ctx.message.location.latitude})`;

    if (userState.state === "location" && userState.editingField !== "location") {
      userState.location = location;
      await registerUser(ctx, userId, userState);
      delete userStates[userId];
    } else if (userState.state === "edit_profile" && userState.editingField === "location") {
      await supabase
        .from("users")
        .update({ location: location })
        .eq("telegram_id", userId)
        .then(() => {
          ctx.reply("üó∫ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! üòÑ");
          delete userStates[userId];
        })
        .catch((error) => {
          console.error("Error updating user:", error);
          ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è! üòî ");
        });
    }
  }
});

const deleteProfile = async (ctx, userId) => {
  try {
    const { error: deleteError } = await supabase
      .from("users")
      .delete()
      .eq("telegram_id", userId);

    if (deleteError) {
      console.error("Error deleting user:", deleteError);
      await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è! üòî ");
    } else {
      await ctx.reply("‚ú® –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üòÑ ");
    }
  } catch (error) {
    console.error("Error deleting user:", error);
    await ctx.reply("üò±üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è! üòî ");
  }
};

bot.launch();

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));